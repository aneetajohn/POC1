package com.oasis.poc1.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.CrossOrigin;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.oasis.poc1.service.Poc1Service;

import io.swagger.v3.oas.annotations.Hidden;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
/**************
 * Class: Poc1Controller 
 * 
 * Purpose: Rest controller class to test External Rest API of ArcGIS Enterprise
 * Poc1 - BiDirectional Communication - ArcGIS to Core Web
 */
@CrossOrigin(origins = "https://oasis-poc2-dynamicui.azurewebsites.net")
@Tag(name = "OASIS - POC 1", description = "Core Web - ArcGIS Communucation")
@RestController
public class Poc1Controller {
	
	@Autowired
	Poc1Service service;
	
	Logger logger = LoggerFactory.getLogger(Poc1Controller.class);
	
	/**************
	 * Method: welcomeMessage 
	 * Purpose: This method will return a welcome message as response
	 * Input parameters: None
	 * @return Welcome Message
	 */
	@Operation(
			summary = "Welcome Message",
			description = "Welcome Message of OASIS - POC 1",
			responses = {
				@ApiResponse(
						responseCode = "200",
						description = "Success",						
						content =@Content (
								mediaType = "String",
								schema=@Schema(
										example = "Hello From Core Web Application, OASIS - POC-1."
										)
								)
						)
			    }				
			)
	@GetMapping("/OASIS/POC1")
	public String welcomeMessage() {
		return "Hello From Core Web Application, OASIS - POC-1.";		
	}
	
	/*
	@Operation(
			summary = "Get Token from ArcGIS Enterprise",
			description = "Getting Token generated by ArcGIS Enterprise"
			)
	@ApiResponses({
				@ApiResponse(responseCode = "200", content = {@Content(schema= @Schema(implementation = Token.class), mediaType = "application/json")}),
				@ApiResponse(responseCode = "400", content = {@Content(schema= @Schema(implementation = Error.class), mediaType = "application/json")}),
				@ApiResponse(responseCode ="500", content= {@Content(schema=@Schema())})
			})
			*/
			
	/**************
	 * Method: getTokenApi 
	 * Purpose: This method is used to receive a token from ArcGis Enterprise
	 * Input parameters: None
	 * @return Token as response
	 */
	@GetMapping("/getTokenAPI")
	public ResponseEntity<?> getTokenApi(){	
		ResponseEntity<?> responseEntity = service.getGenerateTokenApi();			
		return responseEntity;				
	}

	/**************
	 * Method: getPetroleumWellApi 
	 * Purpose: This method is used to test Petroleum Well Subset API Query of ArcGIS Enterprise
	 * Input parameters: None
	 * @return Petroleum Well Query response: WellSubsetQuery
	 */
	@GetMapping("/getWellQuery")
	public ResponseEntity<?> getPetroleumWellApi(){	
		ResponseEntity<?> responseEntity=service.getPetroleumWellSubsetQuery();		
		return responseEntity;				
	}
	
	/**************
	 * Method: getTileDrainageAreaApi 
	 * Purpose: This method is used to test Tile Drainage Area Subset API Query of ArcGIS Enterprise
	 * Input parameters: None
	 * @return Tile Query response: TileSubsetQuery
	 */
	@GetMapping("/getTileQuery")
	public ResponseEntity<?> getTileDrainageAreaApi(){	
		ResponseEntity<?> responseEntity=service.getTileDrainageAreaSubsetQuery();		
		return responseEntity;				
	}
}
